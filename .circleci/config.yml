version: 2.1

orbs: 
    slack: circleci/slack@4.10.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:5}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name backend-${CIRCLE_WORKFLOW_ID:0:5}
            aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive
            aws cloudformation delete-stack --stack-name frontend-<< parameters.Workflow_ID >>
            exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi

jobs:
  build-frontend:                                 #build frontend
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:                                  #build backend
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:                                  #test frontend
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:                                   #test backend
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test Back-end
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:                                  #scan frontend
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan front-end
          command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical

  scan-backend:                                   #scan backend
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan Back-end
          command: |
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical

  deploy-infrastructure:                          #Deploy Infrastructure
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip

      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:5}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:5}"   

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:5}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:5}"  

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances --region us-east-1 \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            # Here's where you will add some code to rollback on failure      
            # - destroy_environment

  configure-infrastructure:                               #Configure infrastructure
    docker:
      - image: mohamedemadeldin/aws-node
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["27:2c:8d:60:ff:ed:a6:18:cd:17:9a:4b:cb:73:3f:87"]
      - attach_workspace:
          at: ~/
      # - run:
      #     name: "Install Dependencies"
      #     command: |
      #       sudo apt install ansible gzip openssh-client
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            aws ec2 describe-instances --region us-east-1 \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> inventory.txt
            cat inventory.txt
            ansible-playbook -i inventory.txt  configure-server.yml -v
            # ansible-playbook -i inventory.txt prometheus-exporter.yml 


  run-migrations:
    docker: 
      - image: circleci/node:13.8.0

    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            export TYPEORM_HOST=$(aws ec2 describe-instances --region us-east-1 \
            --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            cd backend
            npm install
            npm  run build -prod
            npm run premigrations
            npm run migrations
      # - run:
      #     name: Send migration status to kvdb.io OR memstash.io
      #     command: |   
      #       if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
      #       then 
      #         # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
      #         curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" \
      #         --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
      #         # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
      #         curl https://kvdb.io/UEsfUpjFvKSJFBvWasVNQN/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
      #       fi

  deploy-frontend:
    docker:
      - image: mohamedemadeldin/aws-node
    steps:
      - checkout
      - run:
          name: Deploy Frontend
          command: |
            export BACKEND_PUBLIC_IP=$(aws ec2 describe-instances --region us-east-1 \
            --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            # echo "API_URL=http://$BACKEND_PUBLIC_IP:3030" 
            # # Build the frontend
            # cd frontend
            # echo "API_URL=http://$BACKEND_PUBLIC_IP:3030" > .env
            # npm install
            # npm run build:prod
            # # aws s3 sync dist s3://udapeople-project
            # aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:5} --recursive
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
            cd frontend
            npm install
            npm update
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

  deploy-backend:
    docker:
      - image: mohamedemadeldin/aws-node
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["27:2c:8d:60:ff:ed:a6:18:cd:17:9a:4b:cb:73:3f:87"]
      - run:
          name: Deploy backend
          command: |
            # export TYPEORM_HOST=$(aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            # echo $TYPEORM_HOST >> .circleci/ansible/inventory.txt
            # cd backend
            # npm i
            # npm run build
            # echo "TYPEORM_ENTITIES=./dist/modules/domain/**/*.entity{.ts,.js}" > .env
            # echo "TYPEORM_HOST=${TYPEORM_HOST}" >> .env
            # echo "TYPEORM_PORT=${TYPEORM_PORT}" >> .env
            # echo "TYPEORM_USERNAME=${TYPEORM_USERNAME}" >> .env
            # echo "TYPEORM_PASSWORD=${TYPEORM_PASSWORD}" >> .env
            # echo "TYPEORM_DATABASE=${TYPEORM_DATABASE}" >> .env
            # echo "TYPEORM_MIGRATIONS_DIR=./dist/migrations" >> .env
            # echo "TYPEORM_MIGRATIONS=./dist/migrations/*.ts" >> .env
            # tar -czf artifact.tar.gz dist/* package* .env
            # cp artifact.tar.gz ~/project/.circleci/ansible/roles/deploy/artifact.tar.gz
            # ls ../.circleci/ansible/roles/deploy/
            # cd ../.circleci/ansible
            # ansible-playbook -i inventory.txt deploy-backend.yml
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo $TYPEORM_HOST >> .circleci/ansible/inventory.txt
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [master]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      - run-migrations
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]